13_demo_module_06.c – sysfs files


static int platform_probe(struct platform_device *pdev)
{
...cut...
	/* acquire the probe lock */
...cut...
	/* get our first memory resource */
...cut...
	/* get our clock resource */
...cut...
	/* reserve our memory region */
...cut...
	/* ioremap our memory region */
...cut...
	/* initialize our peripheral timer hardware */
...cut...
	/* register our interrupt handler */
...cut...
	/* start our timer and enable our timer hardware interrupts */
...cut...

/* We start our probe function in much the same way as before. */

/* create the sysfs entries */
	ret_val = driver_create_file(&the_platform_driver.driver, &driver_attr_irq_delays);
	if (ret_val != 0) {
		pr_err("failed to create irq_delays sysfs entry");
		goto bad_exit_stop_timer;
	}

	ret_val = driver_create_file(&the_platform_driver.driver, &driver_attr_interval);
	if (ret_val != 0) {
		pr_err("failed to create interval sysfs entry");
		goto bad_exit_remove_irq_delays;
	}
	g_platform_probe_flag = 1;
	up(&g_dev_probe_sem);
	pr_info("platform_probe exit\n");
	return 0;
/* Then we create a couple of sysfs files with the driver _create_file() call */

bad_exit_remove_irq_delays:
	driver_remove_file(&the_platform_driver.driver,&driver_attr_irq_delays);
bad_exit_stop_timer:
	iowrite32(ALTERA_AVALON_TIMER_CONTROL_STOP_MSK,IOADDR_ALTERA_AVALON_TIMER_CONTROL(g_timer_base));

/* ensure there is no pending IRQ */
	do {
		io_result = ioread32(IOADDR_ALTERA_AVALON_TIMER_STATUS(g_timer_base));
		io_result &= ALTERA_AVALON_TIMER_STATUS_TO_MSK;
	} while (io_result != 0);
bad_exit_freeirq:
	free_irq(g_demo_driver_irq, &the_platform_driver);
bad_exit_iounmap:
	iounmap(g_ioremap_addr);
bad_exit_release_mem_region:
	release_mem_region(g_demo_driver_base_addr, g_demo_driver_size);
bad_exit_return:
	up(&g_dev_probe_sem);
		pr_info("platform_probe bad_exit\n");
		return ret_val;
	}
/* If we get an error during probe then we may need to remove the sysfs files 
   we’ve already created */

static int platform_remove(struct platform_device *pdev)
{
...cut...
	driver_remove_file(&the_platform_driver.driver, &driver_attr_interval);
	driver_remove_file(&the_platform_driver.driver,&driver_attr_irq_delays);

	/* stop our timer and disable our timer hardware interrupts */
	iowrite32(ALTERA_AVALON_TIMER_CONTROL_STOP_MSK,IOADDR_ALTERA_AVALON_TIMER_CONTROL(g_timer_base));

	/* ensure there is no pending IRQ */
	do {
	io_result =
	ioread32(IOADDR_ALTERA_AVALON_TIMER_STATUS(g_timer_base));
	io_result &= ALTERA_AVALON_TIMER_STATUS_TO_MSK;
	} while (io_result != 0);

	free_irq(g_demo_driver_irq, &the_platform_driver);
	iounmap(g_ioremap_addr);
	release_mem_region(g_demo_driver_base_addr, g_demo_driver_size);
	if (down_interruptible(&g_dev_probe_sem))
	return -ERESTARTSYS;
	g_platform_probe_flag = 0;
	up(&g_dev_probe_sem);
	pr_info("platform_remove exit\n");
	return 0;
}

/* Our release function needs to remove the sysfs files in addition 
   to what it already did. */


static ssize_t irq_delays_show(struct device_driver *driver, char *buf)
{
	unsigned long flags;
	uint32_t max_irq_delay;
	uint32_t min_irq_delay;
/* The irq_delays sysfs file that we create registers a show() function, 
   so this file can be read from user space. This file allows us to read the max 
   and min IRQ delay stats, stored by the IRQ handler. Note the use of spinlocks
*/

	/* acquire the irq_lock */
	spin_lock_irqsave(&g_irq_lock, flags);

	/* capture the shared data values */
	max_irq_delay = g_max_irq_delay;
	min_irq_delay = g_min_irq_delay;

	/* release the irq_lock */
	spin_unlock_irqrestore(&g_irq_lock, flags);
	if (max_irq_delay == 0)
		return scnprintf(buf, PAGE_SIZE, "no IRQ delays yet\n");
		return scnprintf(buf, PAGE_SIZE,
					"max: 0x%08X = %u\n"
					"min: 0x%08X = %u\n",
					max_irq_delay, max_irq_delay,
					min_irq_delay, min_irq_delay);
}
DRIVER_ATTR(irq_delays, (S_IRUGO), irq_delays_show, NULL);

/* Note the DRIVER_ATTR macro, registering show function only. */

static ssize_t interval_show(struct device_driver *driver, char *buf)
{
...cut...
	/* acquire the irq_lock */
	spin_lock_irqsave(&g_irq_lock, flags);

	/* capture the relevant hardware registers */
	raw_status = ioread32(IOADDR_ALTERA_AVALON_TIMER_STATUS(g_timer_base));
	raw_periodl = ioread32(IOADDR_ALTERA_AVALON_TIMER_PERIODL(g_timer_base));
	raw_periodh = ioread32(IOADDR_ALTERA_AVALON_TIMER_PERIODH(g_timer_base));

	/* release the irq_lock */
	spin_unlock_irqrestore(&g_irq_lock, flags);

	/* calculate the current timer interval */
	raw_status &= ALTERA_AVALON_TIMER_STATUS_RUN_MSK;
		if (raw_status == 0) {
		interval = 0;	
		} else {
		period = (raw_periodl & 0x0000FFFF) | ((raw_periodh << 16) & 0xFFFF0000);
		period += 1;
		interval = g_demo_driver_clk_rate / period;
	}
	return scnprintf(buf, PAGE_SIZE,"irq interval: %u per second\n", interval);
}

/* The interval sysfs file that we create registers a show() function and a store() function, 
   so this file can be read and written from user space. 
   This show function allows us to read the current timer IRQ interval.
   Note the use of spinlocks 
*/

static ssize_t interval_store(struct device_driver *driver, const char *buf,
size_t count)
{
...cut...
	/* convert the input string to the requested new interval value */
	result = kstrtoul(buf, 0, &new_interval);
	if (result != 0)
	return -EINVAL;

	/* range check the requested new interval value */
	if (new_interval > 100)
	return -EINVAL;

	/* calculate the new period value */
	if (new_interval > 0)
	new_period = (g_demo_driver_clk_rate / new_interval) - 1;
	else
	new_period = g_demo_driver_clk_rate;

	/* acquire the irq_lock */
	spin_lock_irqsave(&g_irq_lock, flags);

	/* stop the interval timer */
	iowrite32(ALTERA_AVALON_TIMER_CONTROL_STOP_MSK,
	IOADDR_ALTERA_AVALON_TIMER_CONTROL(g_timer_base));

/*
This is the interval store() function. It allows us to change the IRQ interval 
of the timer hardware. Note the use of spinlocks
*/

/* ensure there is no pending IRQ that we are blocking */
the_status = ioread32(IOADDR_ALTERA_AVALON_TIMER_STATUS(g_timer_base));
the_status &= ALTERA_AVALON_TIMER_STATUS_TO_MSK;
	if (the_status != 0) {
	do {

	/*
	if we are blocking, release the lock to allow IRQ
	handler to execute, acquire the lock and check again
	*/

	spin_unlock_irqrestore(&g_irq_lock, flags);
	spin_lock_irqsave(&g_irq_lock, flags); /* Note the use of spinlocks */
	the_status = ioread32(IOADDR_ALTERA_AVALON_TIMER_STATUS(g_timer_base));
	the_status &= ALTERA_AVALON_TIMER_STATUS_TO_MSK;
	} while (the_status != 0);
}

/* write the new period value */
iowrite32(new_period, IOADDR_ALTERA_AVALON_TIMER_PERIODL(g_timer_base));
iowrite32(new_period >> 16,
IOADDR_ALTERA_AVALON_TIMER_PERIODH(g_timer_base));

/* initialize the MAX/MIN variables */
g_max_irq_delay = 0;
g_min_irq_delay = 0xFFFFFFFF;


/* start the timer */
if (new_interval > 0) iowrite32(ALTERA_AVALON_TIMER_CONTROL_ITO_MSK |
				ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
				ALTERA_AVALON_TIMER_CONTROL_START_MSK,
				IOADDR_ALTERA_AVALON_TIMER_CONTROL(g_timer_base));

/* release the irq_lock */
spin_unlock_irqrestore(&g_irq_lock, flags);
return count;
}
DRIVER_ATTR(interval, (S_IWUGO | S_IRUGO), interval_show, interval_store);

/* The end of our store() function.
   Note the use of spinlocks.
   Note the DRIVER_ATTR macro registering a show and store function. 
*/

irqreturn_t demo_driver_interrupt_handler(int irq, void *dev_id)
{
...cut...
	spin_lock(&g_irq_lock);
	
	/* get the current timer value */
	iowrite32(0, IOADDR_ALTERA_AVALON_TIMER_SNAPL(g_timer_base));
	raw_snapl = ioread32(IOADDR_ALTERA_AVALON_TIMER_SNAPL(g_timer_base));
	raw_snaph = ioread32(IOADDR_ALTERA_AVALON_TIMER_SNAPH(g_timer_base));
	snap = (raw_snapl & 0x0000FFFF) | ((raw_snaph << 16) & 0xFFFF0000);

	/* get the current period value */
	raw_periodl = ioread32(IOADDR_ALTERA_AVALON_TIMER_PERIODL(g_timer_base));
	raw_periodh = ioread32(IOADDR_ALTERA_AVALON_TIMER_PERIODH(g_timer_base));
	period = (raw_periodl & 0x0000FFFF) | ((raw_periodh << 16) & 0xFFFF0000);

	/* calculate response delay and update MAX/MIN variables */
	elapsed_ticks = period - snap;
	if (elapsed_ticks > g_max_irq_delay)
		g_max_irq_delay = elapsed_ticks;
	if (elapsed_ticks < g_min_irq_delay)
		g_min_irq_delay = elapsed_ticks;

	/* clear the interrupt */
	iowrite32(0, IOADDR_ALTERA_AVALON_TIMER_STATUS(g_timer_base));
	spin_unlock(&g_irq_lock);
	return IRQ_HANDLED;
}
/* Our IRQ handler gets a little more complicated in this example.
   Note the use of spinlocks.
   This handler saves off some performance statistics that are read out with 
   the irq_delays file.
*/


demo_module_06.ko target demonstration

modprobe demo_module_06 # insert the module
find /sys -name "*demo*“ # find all sysfs entries
ls /sys/bus/platform/drivers/demo_driver_6 # view the sysfs files

# dump the sysfs files
cat /sys/bus/platform/drivers/demo_driver_6/interval
cat /sys/bus/platform/drivers/demo_driver_6/irq_delays

# run this about 5 times, once per second to verify the 10 IRQ per second speed
cat /proc/interrupts | grep "demo"

# change the IRQ speed to 100 per second
echo "100" > /sys/bus/platform/drivers/demo_driver_6/interval

# run this about 5 times, once per second to verify the 100 IRQ per second speed
cat /proc/interrupts | grep "demo"

# dump the sysfs files
cat /sys/bus/platform/drivers/demo_driver_6/irq_delays
cat /sys/bus/platform/drivers/demo_driver_6/interval

# change the IRQ speed back to 10 per second
echo "10" > /sys/bus/platform/drivers/demo_driver_6/interval

# run this about 5 times, once per second to verify the 10 IRQ per second speed
cat /proc/interrupts | grep "demo"
cat /sys/bus/platform/drivers/demo_driver_6/interval
cat /sys/bus/platform/drivers/demo_driver_6/irq_delays
rmmod demo_module_06

/* Use a calculator to compute the number of CPU clocks the IRQ response takes. */


