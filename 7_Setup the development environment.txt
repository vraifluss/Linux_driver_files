7_Setup the development environment
#
# ARCH should be arm for the Cortex A9
#
	export ARCH=arm
#
# CROSS_COMPILE should point into the target cross compiler tools directory and
# contain the prefix used by all the target tools in that directory
#
	export CROSS_COMPILE=...cut.../soc_workshop/toolchain/bin/arm-linux-gnueabihf-
#
# OUT_DIR should point into the linux kernel build directory, that's where the
# .config file resides for the kernel that we're building against.
#
	export OUT_DIR=...cut.../soc_workshop/socfpga-3.10-ltsi

/*
 When we’re going to be compiling drivers against the kernel that 
 we built for our target platform, it’s rather convenient to define these three variables 
 in our environment so the kernel makefiles have access to their values.
 To compile a kernel module, our architecture is always going to be “arm”, 
 we need to have access to the cross compiler tools that the kernel was built with, 
 and we need to have access to the kernel output directory, 
 so our module can inherit the kernel configuration that we’re running on the target.
*/

/* The typical Linaro GCC tools for ARM linux development. */

[]$ echo ${CROSS_COMPILE} 
 ...cut.../soc_workshop/toolchain/bin/arm-linux-gnueabihf- 
[]$ ls ...cut.../soc_workshop/toolchain/bin/ 
arm-linux-gnueabihf-addr2line 	 arm-linux-gnueabihf-gfortran 
arm-linux-gnueabihf-ar 		 arm-linux-gnueabihf-gprof 
arm-linux-gnueabihf-as 		 arm-linux-gnueabihf-ld 
arm-linux-gnueabihf-c++ 	 arm-linux-gnueabihf-ld.bfd 
arm-linux-gnueabihf-c++filt 	 arm-linux-gnueabihf-ldd 
arm-linux-gnueabihf-cpp 	 arm-linux-gnueabihf-ld.gold 
arm-linux-gnueabihf-ct-ng.config arm-linux-gnueabihf-nm 
arm-linux-gnueabihf-dwp 	 arm-linux-gnueabihf-objcopy 
arm-linux-gnueabihf-elfedit 	arm-linux-gnueabihf-objdump 
arm-linux-gnueabihf-g++ 	arm-linux-gnueabihf-pkg-config 
arm-linux-gnueabihf-gcc 	arm-linux-gnueabihf-pkg-config-real 
arm-linux-gnueabihf-gcc-4.9.2 	arm-linux-gnueabihf-ranlib 
arm-linux-gnueabihf-gcc-ar 	arm-linux-gnueabihf-readelf 
arm-linux-gnueabihf-gcc-nm 	arm-linux-gnueabihf-size 
arm-linux-gnueabihf-gcc-ranlib 	arm-linux-gnueabihf-strings 
arm-linux-gnueabihf-gcov 	arm-linux-gnueabihf-strip 
arm-linux-gnueabihf-gdb 

/* The standard kernel source tree/output directory. */

[]$ ls ${OUT_DIR} 
arch 	firmware 	kernel 	Module.symvers 	sound 
block 	fs 	lib 	net 	System.map 	COPYING 
include MAINTAINERS 	README 	tools 		CREDITS 
init 	Makefile 	REPORTING-BUGS 		usr 	
crypto 	ipc 		mm 	samples 	virt 
Documentation 		Kbuild 	modules.builtin scripts 
vmlinux drivers 	Kconfig modules.order 	security 
vmlinux.o


// Kbuild file

[]$ cat Kbuild 
obj-m := demo_module_01.o 
obj-m += demo_module_01t.o 
obj-m += demo_module_02.o 
obj-m += demo_module_03.o 
obj-m += demo_module_04.o 
obj-m += demo_module_05.o 
obj-m += demo_module_05t.o 
obj-m += demo_module_06.o 
obj-m += demo_module_07.o 
obj-m += demo_module_08.o 
obj-m += demo_module_09.o 
obj-m += demo_module_10.o 
obj-m += demo_module_11.o 
obj-m += demo_module_11t.o

/*
 We start with a standard Kbuild file to define 
 what modules we wish to build in our development directory
*/

//Makefile

[]$ cat Makefile
 ifndef OUT_DIR
	$(error OUT_DIR is undefined, bad environment, 
	  you point OUT_DIR to the linux kernel build output directory)
endif

KDIR ?= $(OUT_DIR)
default:
	$(MAKE) -C $(KDIR) M=$$PWD
clean:
	$(MAKE) -C $(KDIR) M=$$PWD clean
help:
	$(MAKE) -C $(KDIR) M=$$PWD help
modules:
	$(MAKE) -C $(KDIR) M=$$PWD modules
modules_install:
	$(MAKE) -C $(KDIR) M=$$PWD modules_install

/*
 We use a standard module Makefile in our development directory.
*/
